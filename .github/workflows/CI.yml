name: 'DotNetSDKs-CI'

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.config/**'
      - '.github/dependabot.yml'
      - '.vscode/**'
      - 'docs/**'

env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  build:
    name: 'Build CentralBuildOutput'
    runs-on: ubuntu-latest

    if: "!contains(github.event.head_commit.message, 'skip ci')"

    outputs:
      package_version: ${{steps.version.outputs.package_version}}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET 3.1.x SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x

      - name: Setup .NET 6.0.203 SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.203

      - name: Install dependencies
        run: dotnet restore

      - name: Install .NET tools
        run: dotnet tool restore

      - name: Set version
        id: version
        shell: pwsh
        run: |
          $packageVersion = dotnet nbgv get-version --variable NuGetPackageVersion
          Write-Host "::set-output name=package_version::$packageVersion"

      - name: DotNet Format
        run: dotnet dotnet-format --no-restore --verify-no-changes

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Upload output artifact
        uses: actions/upload-artifact@v2
        with:
          name: __output
          path: __output

      - name: Upload package artifact
        uses: actions/upload-artifact@v2
        with:
          name: __packages
          path: __packages

  release_nuget:
    name: 'Release CentralBuildOutput to NuGet.org'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: NuGet.org

    env:
      PACKAGE_VERSION: ${{ needs.build.outputs.package_version }}

    if: "!contains(github.event.head_commit.message, 'skip release')"

    steps:
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-version: latest

      - name: Download __packages
        uses: actions/download-artifact@v2
        with:
          name: __packages
          path: __packages

      - name: Push Treasure.Build.CentralBuildOutput ${{ env.PACKAGE_VERSION }} to NuGet.org
        run: nuget push __packages/NuGet/Release/Treasure.Build.CentralBuildOutput.*.nupkg -ApiKey ${{ secrets.NUGET_API_KEY }} -Source https://api.nuget.org/v3/index.json -SkipDuplicate
